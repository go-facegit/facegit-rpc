// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcd\x6e\x23\xb9\x11\xbe\xf3\x29\x0a\x42\x06\xb0\x01\xa9\x2d\xd9\x81\xc7\x91\xd0\x07\xc3\xe3\x9d\x19\xc0\x3f\x83\x91\x8d\x09\xd6\x18\xf4\x50\xcd\xea\x16\x23\x36\xab\x97\x64\xcb\xd2\x9c\x72\xcb\x03\x04\xc8\x5b\x24\xe7\x5c\xf2\x36\x8b\xe4\x35\x82\x62\x77\xcb\x9a\x59\x25\xd8\xcb\x9e\xd4\x24\xab\xbe\x2a\x16\xab\xbe\x2a\xc9\xba\xce\xac\xac\x10\x52\x18\x14\x32\xc7\x52\x87\xd1\x33\x2e\x06\xc2\x35\x36\x6b\x3c\x3a\x3e\x70\x44\xa1\xdd\xa9\x48\x45\x51\x85\xeb\x81\x10\x4f\x86\xca\xcf\x62\x06\x0f\x4b\x04\x43\x25\x14\xe4\x2a\x19\x00\x75\x58\xa2\x83\xc1\x9f\x3c\xd9\x01\x90\x83\x41\xc0\x4d\x18\x88\xee\x38\xed\xd7\x0c\x9b\xd5\x32\x2c\x79\xcb\x50\xe9\x19\x32\x97\xf9\x12\x7b\xd0\xb8\x00\xa9\x64\x1d\xd0\x0d\x77\xc0\x15\x56\xe4\xb6\x83\x21\x0c\x1c\x2a\xed\x07\xc3\x68\xa4\xc2\x2a\xca\x0f\x12\xd1\x69\x40\x0a\xad\xa8\x98\xc1\x0f\xf4\xa2\x08\x64\xcd\x76\x08\x6f\xaf\x40\xdb\x80\x6e\x2d\x0d\x68\x0b\x1e\x73\xb2\xca\x27\x62\xb7\x99\xc2\xe4\x74\xdc\xeb\xb6\xa6\x40\x5a\xb5\x67\x6a\x08\x39\x59\x8b\x79\xd0\x64\x61\x49\x3e\x80\x54\xca\xa1\xf7\x53\x31\x83\x11\x44\x9d\x29\x58\x0c\xcf\xe4\x56\x69\xc8\xeb\x21\x9f\xa7\xd3\xf3\xb3\xd7\x7f\x18\xd6\xd2\xfb\x67\x72\x2a\xad\x64\x2e\x1d\xd9\xa1\x5a\xa4\xe3\x61\x4d\x64\x32\xaf\xbf\x62\x3a\x19\x8f\x87\x5a\x19\xcc\x82\xae\x90\x9a\x90\x4e\x2e\xc6\x11\xb6\x37\x3f\x85\x2f\x93\xd3\xd7\xc9\x38\x19\x27\x93\xe9\x64\x72\x3a\x99\x7c\x11\xd1\x89\x54\x88\x27\x8f\xde\x6b\xb2\x7d\x28\xbb\x25\xd4\x8e\xd6\x5a\x1d\x8e\x66\xa1\x0d\x76\xc1\x6c\x6f\x9b\x88\x5e\x7c\x3f\x94\xf1\x65\xc8\x16\xba\x6c\x9c\x8c\x37\x2f\xc8\x81\x43\x5f\x73\x20\xd6\xb8\xb3\x31\xed\xbd\x25\xb7\x9d\x82\x22\xf4\x60\x29\x80\x45\x54\x20\xed\xb6\x03\x81\x2d\x86\x28\xc8\xe6\xa7\x3b\x47\x79\x05\x9c\x1d\x43\xc0\xa4\x4c\xe0\x8b\x92\x41\x9e\x74\xa7\xfe\xcb\x6f\x15\xdf\xde\xf7\xac\x73\x2e\x85\x6f\xec\xee\xae\x4f\x2b\x8d\x10\x2b\x27\x10\xf8\x40\x0e\x21\xec\x85\x59\x2b\xb4\x41\x17\x1a\x5d\x22\x5a\xe1\xbe\xcc\x74\x66\xf4\x0a\x33\x5d\x49\x6d\xc4\x0c\x3e\x2d\x31\x3e\x03\xa3\x60\xe8\x81\xb5\x85\x77\x0f\x0f\x1f\xe6\x31\x53\x77\x08\x1e\xf3\xc6\x31\x46\x21\x8d\xc7\xce\x95\xc3\x59\x1c\x9f\xa4\x77\x86\x6f\x90\x88\x32\xcf\xf6\x32\xfb\xec\x7c\x3c\xee\x10\x2a\xb9\xd1\x55\x53\x81\xd1\x05\x02\xc7\xe2\x7b\x1c\xd9\x23\x25\xa2\x92\x9b\x8c\xe5\x62\xcc\x20\x85\x8b\xf3\xdf\xef\x70\xf6\x83\xc2\x6a\x57\xf3\x8f\x3f\x40\xa0\x15\xda\x44\xe4\xde\x15\xd9\xb7\x81\xc8\x78\x4f\x88\xa7\x67\x5c\xf4\x49\x5a\x3b\x0a\x94\x93\x81\xb0\x94\x01\xb4\x87\xc6\xa3\x6a\x43\xe3\xd6\x08\x4a\x3b\xcc\x03\x04\x27\x8b\x42\xe7\xbc\xcf\x21\x97\x75\x6d\x74\x1e\x13\x31\x11\x33\xb8\x6a\x9c\x43\x1b\xcc\x16\x7c\x53\xd7\xe4\x82\x87\xc1\x32\x84\x9a\x13\x9c\x7f\x7d\xcc\xf4\xbc\xd4\x5d\x2d\x37\x56\x6f\xda\x44\x6f\x4d\xa7\xc0\x52\x9d\x43\x5d\x35\xb3\xa9\x05\x82\xd1\x3e\xa0\x45\x05\x8b\xed\x2f\x2d\xb3\x56\xc6\xf2\x90\xc2\x38\xd6\xe4\x58\xf4\xd7\x22\x17\xc0\x36\xd5\xa2\x7d\xe7\x5f\x85\x14\x75\x52\xb8\x18\x9f\x9e\xee\x60\x9a\x85\xd1\xf9\xa8\x90\xb9\xb6\x25\x28\xaa\xa4\xb6\x2f\xd1\xfe\x05\x4c\x27\x90\x82\xa1\x5c\x1a\xe6\x85\x1d\x10\x73\x6e\x4c\x90\x40\x8e\xb1\xf6\xf4\x80\xab\x58\x73\x78\xdb\xac\xe1\x06\xc1\x5f\x3d\x51\xf3\xf7\x61\x87\x1e\x3f\xde\x1c\x76\x04\x37\x01\x9d\x95\x26\x6b\x1c\x87\xf7\xd5\x51\x1f\xeb\x63\x3f\x3d\x39\x79\x75\xd4\x3a\x7a\xec\xa7\xaf\x8e\x76\x57\x3f\xf6\x27\x6c\xe5\x2d\x5a\x74\x32\x20\xf8\x80\x75\x24\xd5\xdf\x41\x72\x12\x6b\x07\x72\x74\x01\x46\xb9\x4c\x83\x6b\x10\x46\xaa\x23\xa3\xf4\xe2\xf5\xf9\x78\x39\xae\xc6\x1e\x46\x7c\xe9\xb4\xda\xf2\x4f\x82\x1b\x59\xd5\x06\x93\x9c\x2a\x31\x13\x33\xb8\x77\x50\x38\xaa\x40\x42\x52\x17\x9b\x96\x6e\x70\xc3\xb6\x51\xb5\x27\x7c\x91\x4f\xda\x2a\x7a\xf6\xd1\x18\x47\xa5\xf5\x85\xab\xfd\x48\x91\x98\x45\x3e\x2b\xc8\x95\x18\xf8\x65\x5b\xfd\xa8\x58\x3b\xbd\x66\xe1\x15\x6e\x8f\x5b\xbf\xa9\x46\xeb\xbd\x81\x7a\x95\xfb\xc9\x29\x8c\xb4\x8d\xa8\xd1\xfa\x88\x9a\xd0\xad\xb0\x82\x91\xa5\x15\x6e\xfd\xaf\xd3\x5a\xe1\xb6\x57\xe2\x03\xcf\x1f\x0a\xbd\xe0\x45\x16\x6f\x95\x42\xde\xf8\x40\xd5\x49\x4c\xff\x93\xde\x8c\x58\xe1\xf6\xa0\x40\x87\xd8\xbf\x72\xa5\x6d\xa4\x07\x69\x0c\x3d\xa3\x82\x87\x9b\x39\xac\xd1\x31\x1f\x0c\x21\x3f\x50\x6d\x0f\x37\xf3\xc9\x98\xab\x8c\x3f\x26\xfd\xc7\xe9\x60\xd8\x16\x1c\x2f\xce\x06\x89\x08\xc6\x67\x95\xb6\x59\x87\x05\x29\x44\x31\xee\xb7\x91\xfa\xd1\x55\xba\xe5\xaf\xe7\x25\xda\x8e\x02\xfa\xda\x5f\x6b\x09\x8f\x56\x6f\xfa\x32\xf0\x94\xaf\x30\x24\x82\xab\x39\x6b\x17\xd9\x1e\x42\x0a\xe7\xe7\xe7\x62\x06\x37\x5c\x0a\x70\xf4\xe6\xf6\xc7\xe3\x5d\xbe\x72\xeb\x40\xe7\xe1\x28\xb6\x99\xf9\xfc\x1d\x34\xb5\x92\x01\x8f\x41\xe6\x39\xf3\x9e\x2d\xe1\x19\x17\xd1\x01\x9d\x23\x73\xcc\x7b\x0b\x15\xf7\xd9\x5c\x7a\xf4\xb0\xa5\x06\x14\xbd\xb4\xb6\x40\x90\x2f\xa5\x2d\xdb\x8e\xa0\xb0\x90\x8d\x09\xb0\x96\xa6\x89\xca\x97\x86\x47\x13\x1d\x22\xb7\x83\x2e\x58\xdf\x45\xbb\xf1\x8a\x0e\xf8\xfd\x98\xfc\x18\x30\xf6\x14\x2e\x71\xe9\x63\x47\x88\x87\x89\x88\x25\x9d\xc5\x01\xea\x7f\x14\xd5\x8e\x8e\x0e\xd6\xd5\x5e\xd7\x51\xda\xcb\x85\x89\x03\x5c\xc9\x57\xd5\x16\x1c\x35\x81\x1b\x57\x77\x94\xb5\xeb\x8c\x47\xbc\x14\xb8\xda\xbe\x45\x40\x1b\x01\xf6\x49\xc4\xe0\x1a\x0d\xbc\xfd\xf1\xfd\x07\xc8\xa9\xaa\x5d\xdf\x3e\x5a\xd1\xac\xfc\xaa\xeb\x5d\x1b\x3b\x08\x16\x08\x0c\x49\x05\xd2\x7b\x0c\x1e\x8e\x74\x82\x09\x0c\xb8\x27\x73\x3e\x05\xac\x6a\x23\x03\x46\x2e\x6f\x59\x68\x70\xdc\x16\xad\xd2\x7e\x05\xda\xfa\x80\x52\x01\x15\x80\xd5\x02\x95\x62\xa6\xd5\xb6\x65\x34\xc6\xcd\x5a\xdc\x8c\x55\xb2\xa8\xb2\xe7\x4d\x1c\x67\xa5\x55\x1c\x8d\x5a\x96\xb8\xcb\x14\x69\xc9\x6e\x2b\x6a\x62\x5f\x72\x7e\x18\x5f\x27\xbe\x2b\xf8\x25\x35\x46\xc5\x27\xd3\x36\x37\x8d\xe2\x18\xf9\x66\x11\x59\xb3\xef\x66\x4b\x69\x95\x79\x21\x7d\x87\x9c\xfa\xb1\xeb\x6d\xb6\x89\xe8\x4c\x76\x0f\x7a\x22\x44\x9b\x7e\x3c\x88\x04\x47\x26\x8b\xf5\x97\x91\xd3\x25\xb3\xba\x10\xe2\x89\xef\xb3\x90\x9e\xc7\xe5\x76\xbc\xdd\xfa\x9f\x4c\x3b\xdd\x8a\x77\xf7\xf3\x87\x38\xc0\xf6\xf3\xe1\xd9\xd9\xf8\x5c\xdc\x5d\xde\x5e\xc7\xab\xc6\x49\x5f\x3c\xce\xaf\x3f\xee\x2d\x3f\x5c\xce\xe7\x9f\xee\x3f\xbe\x81\xb4\x1f\x7a\x6b\xf2\xa1\x74\xe8\x3b\xd0\xf9\xd5\xbb\xeb\xdb\x4b\x48\x3b\xe6\x3f\x2c\xf5\x32\x59\x76\xf9\xd3\x0e\xea\x3f\x35\xda\x61\xfb\x77\x60\x8d\x4e\x17\xdb\x51\xd1\x18\x33\x48\xc4\x7c\x7e\x93\xdd\xde\xbf\x61\xbf\x3a\x85\xef\xe6\x12\xa6\xc0\xbd\x39\xdb\xf3\xb3\x46\x8a\x25\x32\x89\xb8\xbd\xfc\x63\x76\xff\xe1\xfa\x2e\xbb\xba\xbf\xbb\x9b\xf3\x64\xf3\xfd\x5c\xc3\x33\xde\xff\xd7\x7f\xff\xe6\xe6\x7a\x5f\x5f\x3c\xe9\xc9\x85\xfd\xcc\x4f\x52\x7a\x48\x01\xed\xe8\x71\x3e\xfc\xba\x1c\x5d\xdd\x09\x6e\xb8\xbc\x77\x6d\x4b\xa3\xfd\x72\xf8\x9f\x7f\xfc\xf9\xe7\x7f\xfd\xf5\xe7\x7f\xfe\xfd\xdf\x7f\xfb\x8b\x98\xc1\x23\x4f\x2c\x9c\x2c\x4c\x21\x3c\x24\xd5\x3a\x5f\xa1\x6b\x11\x13\xde\x64\xd0\xcf\x22\x42\x46\x68\x11\x71\x21\x85\xaf\xcb\xff\x06\x00\x00\xff\xff\xae\x16\x59\xeb\x8e\x0d\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf": confAppConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf": &bintree{confAppConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
