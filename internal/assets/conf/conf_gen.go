// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x6f\xdb\x38\x12\x7f\xe7\xa7\x18\x18\xb7\x40\x02\xd8\x8a\x9d\x1c\xd2\x9c\x0d\x3d\x04\x69\xb6\x2d\x90\x34\x45\x9d\xa2\x87\x2d\x0e\x2a\x4d\x8e\x6c\x9e\x29\x8e\x96\xa4\x1c\x6b\x3f\xfd\x61\x28\xc9\x71\xbb\xbe\xc3\xbe\xdc\x53\x4c\x71\xe6\x37\x7f\x38\xf3\x9b\x89\xac\xeb\xc2\xc9\x0a\x21\x87\x51\x29\x15\xae\x4d\x9c\xf8\x5a\x8d\x84\x6f\x5c\xd1\x04\xf4\x7c\xe1\x89\x62\xf7\xa5\x22\x9d\x44\x35\xee\x46\x42\x7c\xb3\xb4\xfe\x97\x58\xc0\xf3\x06\xc1\xd2\x1a\x4a\xf2\x95\x8c\x80\x26\x6e\xd0\xc3\xe8\xdf\x81\xdc\x08\xc8\xc3\x28\xe2\x3e\x8e\x44\x7f\x9d\x0f\x67\x86\x2d\x6a\x19\x37\xfc\xc9\xd2\x3a\x30\xa4\x92\x6a\x83\x03\x68\x3a\x80\xd4\xb2\x8e\xe8\xc7\x07\xe0\x0a\x2b\xf2\xed\x68\x0c\x23\x8f\xda\x84\xd1\x38\x19\xa9\xb0\x4a\xf2\xa3\x4c\xf4\x1a\x90\x43\x27\x2a\x16\xf0\x2b\xbd\x2a\x02\x39\xdb\x8e\xe1\xdd\x1d\x18\x17\xd1\xef\xa4\x05\xe3\x20\xa0\x22\xa7\x43\x26\x0e\x1f\x73\x98\x5d\x4e\x07\xdd\xce\x14\x48\xa7\x8f\x4c\x8d\x41\x91\x73\xa8\xa2\x21\x07\x1b\x0a\x11\xa4\xd6\x1e\x43\x98\x8b\x05\x4c\x20\xe9\xcc\xc1\x61\x7c\x21\xbf\xcd\xa3\xaa\xc7\x7c\x9f\xcf\xaf\xaf\xde\xfc\x63\x5c\xcb\x10\x5e\xc8\xeb\xbc\x92\x4a\x7a\x72\x63\xbd\xca\xa7\xe3\x9a\xc8\x16\xc1\xfc\x81\xf9\x6c\x3a\x1d\x1b\x6d\xb1\x88\xa6\x42\x6a\x62\x3e\xbb\x99\x26\xd8\xc1\xfc\x1c\xbe\xcf\x2e\xdf\x64\xd3\x6c\x9a\xcd\xe6\xb3\xd9\xe5\x6c\xf6\x5d\x24\x27\x72\x21\xbe\x05\x0c\xc1\x90\x1b\x52\xd9\x1f\xa1\xf6\xb4\x33\xfa\x74\x36\x4b\x63\xb1\x4f\x66\x17\x6d\x26\x06\xf1\xe3\x54\xa6\x97\x21\x57\x9a\x75\xe3\x65\x8a\xbc\x24\x0f\x1e\x43\xcd\x89\xd8\xe1\xc1\xc6\x7c\xf0\x96\x7c\x3b\x07\x4d\x18\xc0\x51\x04\x87\xa8\x41\xba\xb6\x07\x81\x16\x63\x12\x64\xf3\xf3\x83\xa3\x7c\x02\xae\x8e\x31\x60\xb6\xce\xe0\xbb\x96\x51\x5e\xf4\xb7\xe1\xfb\xff\x2b\xbf\x83\xef\x45\xef\x5c\x0e\x3f\xd8\x3d\x84\x4f\x5b\x83\x90\x3a\x27\x12\x84\x48\x1e\x21\x1e\xa5\xd9\x68\x74\xd1\x94\x06\x7d\x26\x3a\xe1\xa1\xcd\x4c\x61\xcd\x16\x0b\x53\x49\x63\xc5\x02\xbe\x6e\x30\x3d\x03\xa3\x60\x1c\x80\x8d\x83\xf7\xcf\xcf\x9f\x96\xa9\x52\x0f\x08\x01\x55\xe3\x19\xa3\x94\x36\x60\xef\xca\xe9\x2a\x4e\x4f\x32\x38\xc3\x11\x64\x62\xad\x8a\xa3\xca\xbe\xba\x9e\x4e\x7b\x84\x4a\xee\x4d\xd5\x54\x60\x4d\x89\xc0\xb9\xf8\x19\x47\x0e\x48\x99\xa8\xe4\xbe\x60\xb9\x94\x33\xc8\xe1\xe6\xfa\xef\x07\x9c\xe3\xa4\xb0\xda\xdd\xf2\xf3\xaf\x10\x69\x8b\x2e\x13\x2a\xf8\xb2\xf8\x31\x11\x05\x7f\x13\xe2\x9b\xaf\xd5\x50\xa4\xb5\xa7\x48\x8a\x2c\xc4\x8d\x8c\x60\x02\x34\x01\x75\x97\x1a\xbf\x43\xd0\xc6\xa3\x8a\x10\xbd\x2c\x4b\xa3\xf8\x3b\xa7\x5c\xd6\xb5\x35\x2a\x15\x62\x26\x16\x70\xd7\x78\x8f\x2e\xda\x16\x42\x53\xd7\xe4\x63\x80\xd1\x26\xc6\x9a\x0b\x9c\xff\x86\x54\xe9\x6a\x6d\xfa\x5e\x6e\x9c\xd9\x77\x85\xde\x99\xce\x81\xa5\x7a\x87\xfa\x6e\x66\x53\x2b\x04\x6b\x42\x44\x87\x1a\x56\xed\x9f\x2d\xb3\x56\xc1\xf2\x90\xc3\x34\xf5\xe4\x54\x0c\x61\x91\x8f\xe0\x9a\x6a\xd5\xbd\xf3\x5f\x42\x4a\x3a\x39\xdc\x4c\x6f\x5e\x61\x9a\x95\x35\x6a\x52\x4a\x65\xdc\x1a\x34\x55\xd2\xb8\xd7\x6c\xff\x09\xa6\x17\xc8\xc1\x92\x92\x96\x79\xe1\x00\xc4\x9c\x9b\x0a\x24\x92\x67\xac\x23\x3d\xe0\x2e\x36\x9c\xde\xae\x6a\x78\x40\xf0\xaf\x81\xa8\xf9\xf7\x69\x87\xbe\x7c\x7e\x38\xed\x08\xee\x23\x7a\x27\x6d\xd1\x78\x4e\xef\x2f\x67\x43\xae\xcf\xc3\xfc\xe2\xe2\x97\xb3\xce\xd1\xf3\x30\xff\xe5\xec\x10\xfa\x79\xb8\x60\x2b\xef\xd0\xa1\x97\x11\x21\x44\xac\x13\xa9\xfe\x0d\xb2\x8b\xd4\x3b\xa0\xd0\x47\x98\x28\x99\x47\xdf\x20\x4c\x74\x4f\x46\xf9\xcd\x9b\xeb\xe9\x66\x5a\x4d\x03\x4c\x38\xe8\xbc\x6a\xf9\x4f\x86\x7b\x59\xd5\x16\x33\x45\x95\x58\x88\x05\x3c\x79\x28\x3d\x55\x20\x21\xab\xcb\x7d\x47\x37\xb8\x67\xdb\xa8\xbb\x1b\x0e\xe4\xab\x71\x9a\x5e\x42\x32\xc6\x59\xe9\x7c\xe1\x6e\x3f\xd3\x24\x16\x89\xcf\x4a\xf2\x6b\x8c\xfc\xb2\x9d\x7e\x52\xac\xbd\xd9\xb1\xf0\x16\xdb\xf3\xce\x6f\xaa\xd1\x85\x60\xa1\xde\xaa\x30\xbb\x84\x89\x71\x09\x35\x59\x9f\x50\x13\xfb\x13\x56\x30\x71\xb4\xc5\x36\xfc\x35\xad\x2d\xb6\x83\x12\x5f\x04\xfe\xa1\x31\x08\x3e\x14\x29\xaa\x1c\x54\x13\x22\x55\x17\xa9\xfc\x2f\x06\x33\x62\x8b\xed\x49\x81\x1e\x71\x78\xe5\xca\xb8\x44\x0f\xd2\x5a\x7a\x41\x0d\xcf\x0f\x4b\xd8\xa1\x67\x3e\x18\x83\x3a\xd1\x6d\xcf\x0f\xcb\xd9\x94\xbb\x8c\x7f\xcc\x86\x1f\x97\xa3\x71\xd7\x70\x7c\xb8\x1a\x65\x22\xda\x50\x54\xc6\x15\x3d\x16\xe4\x90\xc4\x78\xde\x26\xea\x47\x5f\x99\x8e\xbf\x5e\x36\xe8\x7a\x0a\x18\x7a\x7f\x67\x24\x7c\x71\x66\x3f\xb4\x41\x20\xb5\xc5\x98\x09\xee\xe6\xa2\x3b\x14\x47\x08\x39\x5c\x5f\x5f\x8b\x05\x3c\x70\x2b\xc0\xd9\xdb\xc7\xdf\xce\x0f\xf5\xca\xa3\x03\x7d\x80\xb3\x34\x66\x96\xcb\xf7\xd0\xd4\x5a\x46\x3c\x07\xa9\x14\xf3\x9e\x5b\xc3\x0b\xae\x92\x03\x46\x21\x73\xcc\x07\x07\x15\xcf\x59\x25\x03\x06\x68\xa9\x01\x4d\xaf\xa3\x2d\x12\xa8\x8d\x74\xeb\x6e\x22\x68\x2c\x65\x63\x23\xec\xa4\x6d\x92\xf2\xad\xe5\xd5\xc4\xc4\xc4\xed\x60\x4a\xd6\xf7\xc9\x6e\x0a\xd1\x03\xbf\x1f\x93\x1f\x03\xa6\x99\xc2\x2d\x2e\x43\x9a\x08\xe9\x32\x13\xa9\xa5\x8b\xb4\x40\xfd\x97\xa6\x3a\xd0\xd1\xc9\xbe\x3a\x9a\x3a\xda\x04\xb9\xb2\x69\x81\x5b\x73\xa8\xc6\x81\xa7\x26\xf2\xe0\xea\xaf\x8a\xee\x5c\xf0\x8a\x97\x03\x77\xdb\x8f\x08\xe8\x12\xc0\x31\x89\x58\xdc\xa1\x85\x77\xbf\x7d\xf8\x04\x8a\xaa\xda\x0f\xe3\xa3\x13\x2d\xd6\x7f\x98\xfa\x30\xc6\x4e\x82\x45\x02\x4b\x52\x83\x0c\x01\x63\x80\x33\x93\x61\x06\x23\x9e\xc9\x5c\x4f\x11\xab\xda\xca\x88\x89\xcb\x3b\x16\x1a\x9d\x77\x4d\xab\x4d\xd8\x82\x71\x21\xa2\xd4\x40\x25\x60\xb5\x42\xad\x99\x69\x8d\xeb\x18\x8d\x71\x8b\x0e\xb7\x60\x95\x22\xa9\x1c\x79\x93\xd6\x59\xe9\x34\x67\xa3\x96\x6b\x3c\x54\x8a\x74\xe4\xda\x8a\x9a\x34\x97\x7c\x18\xa7\xd7\x49\xef\x0a\x61\x43\x8d\xd5\xe9\xc9\x8c\x53\xb6\xd1\x9c\xa3\xd0\xac\x12\x6b\x0e\xd3\x6c\x23\x9d\xb6\xaf\xa4\xef\x91\x4b\x3f\x4d\xbd\x7d\x9b\x89\xde\x64\xff\xa0\x17\x42\x74\xe5\xc7\x8b\x48\xf4\x64\x8b\xd4\x7f\x05\x79\xb3\x66\x56\x17\x42\x7c\xe3\x78\x56\x32\xf0\xba\xdc\xad\xb7\x6d\xf8\xdd\x76\xdb\xad\x78\xff\xb4\x7c\x4e\x0b\xec\xb0\x1f\x5e\x5d\x4d\xaf\xc5\xc7\xdb\xc7\xfb\x14\x6a\xda\xf4\xc5\x97\xe5\xfd\xe7\xa3\xe3\xa7\xdb\xe5\xf2\xeb\xd3\xe7\xb7\x90\x0f\x4b\x6f\x4d\x21\xae\x3d\x86\x1e\x74\x79\xf7\xfe\xfe\xf1\x16\xf2\x9e\xf9\x4f\x4b\xbd\x6e\x96\x7d\xfd\x74\x8b\xfa\xef\x8d\xf1\xd8\xfd\x3b\xb0\x43\x6f\xca\x76\x52\x36\xd6\x8e\x32\xb1\x5c\x3e\x14\x8f\x4f\x6f\xd9\xaf\x5e\xe1\xa7\xbd\x84\x29\xf0\x68\xcf\x0e\xfc\xac\x89\x62\x89\x6c\x26\x1e\x6f\xff\x59\x3c\x7d\xba\xff\x58\xdc\x3d\x7d\xfc\xb8\xe4\xcd\xe6\xe7\xbd\x86\x77\xbc\xff\xad\xff\xe1\xed\xc3\xfd\xb1\xfe\x7f\x02\x00\x00\xff\xff\x72\xdc\x4b\xa1\x16\x0d\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf": confAppConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf": &bintree{confAppConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
